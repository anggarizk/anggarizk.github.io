{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","bigAvatar","margin","width","height","root","justifyContent","button","spacing","input","display","card","minWidth","maxWidth","paddingTop","bullet","transform","title","fontSize","pos","marginBottom","App","classes","className","Grid","container","justify","alignItems","Avatar","alt","src","Card","CardContent","Typography","color","gutterBottom","variant","component","CardActions","IconButton","aria-label","href","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,4OCiBrCC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,UAAW,CACTC,QAAS,GACTC,MAAO,IACPC,OAAQ,KAEVC,KAAM,CACJC,eAAgB,UAElBC,OAAQ,CACNL,OAAQF,EAAMQ,QAAQ,IAExBC,MAAO,CACLC,QAAS,QAEXC,KAAM,CACJC,SAAU,IACVC,SAAU,IACVC,WAAY,QAEdC,OAAQ,CACNL,QAAS,eACTR,OAAQ,QACRc,UAAW,cAEbC,MAAO,CACLC,SAAU,IAEZC,IAAK,CACHC,aAAc,QA+CHC,MA3Cf,WAEE,IAAMC,EAAUxB,IAGhB,OAFa,0BAAMyB,UAAWD,EAAQP,QAAzB,UAGX,yBAAKQ,UAAU,OACb,yBAAKA,UAAU,cACb,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,WAAW,UAC1C,kBAACC,EAAA,EAAD,CAAQC,IAAI,uBAAuBC,IAAI,aAAaP,UAAWD,EAAQrB,aAEzE,kBAAC8B,EAAA,EAAD,CAAMR,UAAWD,EAAQX,MACvB,kBAACqB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYV,UAAWD,EAAQL,MAAOiB,MAAM,gBAAgBC,cAAY,IAGxE,kBAACF,EAAA,EAAD,CAAYG,QAAQ,KAAKC,UAAU,MAAnC,wBAGA,kBAACJ,EAAA,EAAD,CAAYV,UAAWD,EAAQH,IAAKe,MAAM,iBAA1C,sBAGA,kBAACD,EAAA,EAAD,CAAYG,QAAQ,QAAQC,UAAU,KAAtC,8NAIF,kBAACC,EAAA,EAAD,CAAahB,QAAS,CAACjB,KAAMiB,EAAQjB,OACnC,kBAACkC,EAAA,EAAD,CAAYL,MAAM,UAAUX,UAAWD,EAAQf,OAAQiC,aAAW,YAAYC,KAAK,iCAAiCC,OAAO,SACzH,kBAAC,IAAD,OAEF,kBAACH,EAAA,EAAD,CAAYL,MAAM,UAAUX,UAAWD,EAAQf,OAAQiC,aAAW,WAAWC,KAAK,uDAAuDC,OAAO,SAC9I,kBAAC,IAAD,OAEF,kBAACH,EAAA,EAAD,CAAYL,MAAM,UAAUX,UAAWD,EAAQf,OAAQiC,aAAW,QAChE,kBAAC,IAAD,YCxEMG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.08acb01d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport logo from './logo.svg';\nimport { makeStyles } from '@material-ui/core/styles';\nimport './App.css';\nimport IconButton from '@material-ui/core/IconButton';\nimport Instagram from '@material-ui/icons/Instagram';\nimport LinkedIn from '@material-ui/icons/LinkedIn';\nimport Twitter from '@material-ui/icons/Twitter';\nimport Email from '@material-ui/icons/Email';\nimport Avatar from '@material-ui/core/Avatar';\nimport Grid from '@material-ui/core/Grid';\n\nconst useStyles = makeStyles(theme => ({\n  bigAvatar: {\n    margin: -60,\n    width: 120,\n    height: 120,\n  },\n  root: {\n    justifyContent: 'center'\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  input: {\n    display: 'none',\n  },\n  card: {\n    minWidth: 500,\n    maxWidth: 500,\n    paddingTop: '60px',\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12\n  },\n}));\n\nfunction App() {\n\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>â€¢</span>;\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <Grid container justify=\"center\" alignItems=\"center\">\n          <Avatar alt=\"Angga Rizki Ramadhan\" src=\"/photo.jpg\" className={classes.bigAvatar} />\n        </Grid>\n        <Card className={classes.card}>\n          <CardContent>\n            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n\n            </Typography>\n            <Typography variant=\"h5\" component=\"h2\">\n              Angga Rizki Ramadhan\n            </Typography>\n            <Typography className={classes.pos} color=\"textSecondary\">\n              Software Developer\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\">\n            As a Software Developer, I would like to bring technology to make life easier and increase productivity. I also want to create great products which have good design architecture, high scalability and easy to maintain.\n            </Typography>\n          </CardContent>\n          <CardActions classes={{root: classes.root}}>\n            <IconButton color=\"primary\" className={classes.button} aria-label=\"Instagram\" href=\"http://instagram.com/anggarizk\" target=\"blank\">\n              <Instagram />\n            </IconButton>\n            <IconButton color=\"primary\" className={classes.button} aria-label=\"LinkedIn\" href=\"http://linkedin.com/in/angga-rizki-ramadhan-65a41270\" target=\"blank\">\n              <LinkedIn />\n            </IconButton>\n            <IconButton color=\"primary\" className={classes.button} aria-label=\"Mail\">\n              <Email />\n            </IconButton>\n          </CardActions>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}